import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import subprocess
import sys
import threading
import os
import json
from pathlib import Path

CONFIG_PATH = Path.home() / ".psarc_tool_config.json"

class AutoPSARCApp:
    def __init__(self, root):
        self.root = root
        self.root.title("AutoPSARC - GUI")

        self.input_dir = tk.StringVar()
        self.output_dir = tk.StringVar()
        self.psarc_path = tk.StringVar()
        self.workers = tk.IntVar(value=4)
        self.enable_log = tk.BooleanVar()
        self.enable_verbose = tk.BooleanVar()
        self.process = None

        self.load_config()
        self.create_widgets()

    def load_config(self):
        if CONFIG_PATH.exists():
            try:
                with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                    config = json.load(f)
                    self.psarc_path.set(config.get("psarc_path", ""))
                    self.workers.set(config.get("workers", 4))
                    self.enable_log.set(config.get("log_enabled", False))
                    self.enable_verbose.set(config.get("verbose_enabled", False))
            except Exception:
                pass

    def save_config(self):
        config = {
            "psarc_path": self.psarc_path.get(),
            "workers": self.workers.get(),
            "log_enabled": self.enable_log.get(),
            "verbose_enabled": self.enable_verbose.get()
        }
        try:
            with open(CONFIG_PATH, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=4)
        except Exception:
            pass

    def create_widgets(self):
        frame = ttk.Frame(self.root, padding="10")
        frame.grid(row=0, column=0, sticky="nsew")

        ttk.Label(frame, text="Input Directory:").grid(row=0, column=0, sticky="w")
        ttk.Entry(frame, textvariable=self.input_dir, width=50).grid(row=0, column=1, sticky="ew")
        ttk.Button(frame, text="Browse", command=self.browse_input).grid(row=0, column=2)

        ttk.Label(frame, text="Output Directory:").grid(row=1, column=0, sticky="w")
        ttk.Entry(frame, textvariable=self.output_dir, width=50).grid(row=1, column=1, sticky="ew")
        ttk.Button(frame, text="Browse", command=self.browse_output).grid(row=1, column=2)

        ttk.Label(frame, text="PSARC.exe Path:").grid(row=2, column=0, sticky="w")
        ttk.Entry(frame, textvariable=self.psarc_path, width=50).grid(row=2, column=1, sticky="ew")
        ttk.Button(frame, text="Browse", command=self.browse_psarc).grid(row=2, column=2)

        ttk.Label(frame, text="Worker Threads:").grid(row=3, column=0, sticky="w")
        ttk.Spinbox(frame, from_=1, to=64, textvariable=self.workers, width=5).grid(row=3, column=1, sticky="w")

        ttk.Checkbutton(frame, text="Enable Logging", variable=self.enable_log).grid(row=4, column=0, sticky="w")
        ttk.Checkbutton(frame, text="Verbose Output", variable=self.enable_verbose).grid(row=4, column=1, sticky="w")

        self.progress = ttk.Progressbar(frame, mode="indeterminate")
        self.progress.grid(row=5, column=0, columnspan=3, sticky="ew", pady=5)

        self.start_button = ttk.Button(frame, text="Start Extraction", command=self.start_extraction)
        self.start_button.grid(row=6, column=0, pady=5)

        self.cancel_button = ttk.Button(frame, text="Cancel", command=self.cancel_extraction, state="disabled")
        self.cancel_button.grid(row=6, column=1, pady=5)

        self.output_box = tk.Text(frame, height=15, width=80, state="disabled")
        self.output_box.grid(row=7, column=0, columnspan=3, pady=10)

        self.root.grid_columnconfigure(0, weight=1)
        frame.grid_columnconfigure(1, weight=1)

    def browse_input(self):
        path = filedialog.askdirectory()
        if path:
            self.input_dir.set(path)

    def browse_output(self):
        path = filedialog.askdirectory()
        if path:
            self.output_dir.set(path)

    def browse_psarc(self):
        path = filedialog.askopenfilename(title="Select PSARC.exe", filetypes=[("Executable", "*.exe")])
        if path:
            self.psarc_path.set(path)

    def cancel_extraction(self):
        if self.process:
            self.process.terminate()
            self.append_output("Extraction cancelled.\n")
            self.process = None
            self.progress.stop()
            self.start_button.config(state="normal")
            self.cancel_button.config(state="disabled")

    def start_extraction(self):
        input_dir = Path(self.input_dir.get())
        output_dir = Path(self.output_dir.get())

        if not input_dir.exists():
            messagebox.showerror("Error", "Input directory does not exist.")
            return

        if not os.access(input_dir, os.R_OK):
            messagebox.showerror("Error", "No read permission for input directory.")
            return

        if not output_dir.exists():
            try:
                output_dir.mkdir(parents=True, exist_ok=True)
            except Exception as e:
                messagebox.showerror("Error", f"Could not create output directory: {e}")
                return

        if not os.access(output_dir, os.W_OK):
            messagebox.showerror("Error", "No write permission for output directory.")
            return

        total, used, free = shutil.disk_usage(output_dir)
        if free < 100 * 1024 * 1024:  # Less than 100 MB
            messagebox.showerror("Error", "Insufficient disk space in output directory.")
            return

        self.save_config()

        self.output_box.config(state="normal")
        self.output_box.delete("1.0", tk.END)
        self.output_box.config(state="disabled")

        self.progress.start()
        self.start_button.config(state="disabled")
        self.cancel_button.config(state="normal")

        thread = threading.Thread(target=self.run_extraction)
        thread.start()

    def run_extraction(self):
        cli_script = str(Path(__file__).parent / "AutoPSARC.py")
        args = [
            sys.executable, cli_script,
            "-i", self.input_dir.get(),
            "-o", self.output_dir.get(),
            "--workers", str(self.workers.get())
        ]

        if self.enable_log.get():
            args.append("--log")
        if self.enable_verbose.get():
            args.append("--verbose")

        self.process = subprocess.Popen(
            args,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            bufsize=1,
            universal_newlines=True
        )

        for line in self.process.stdout:
            self.root.after(0, self.append_output, line)

        self.process.wait()
        exit_code = self.process.returncode

        self.process = None

        def on_complete():
            self.progress.stop()
            self.start_button.config(state="normal")
            self.cancel_button.config(state="disabled")
            if exit_code == 0:
                self.append_output("Extraction complete.\n")
            else:
                self.append_output(f"Extraction failed with code {exit_code}.\n")

        self.root.after(0, on_complete)

    def append_output(self, text):
        self.output_box.config(state="normal")
        self.output_box.insert(tk.END, text)
        self.output_box.see(tk.END)
        self.output_box.config(state="disabled")

if __name__ == "__main__":
    import shutil
    root = tk.Tk()
    app = AutoPSARCApp(root)
    root.mainloop()
